/***/

/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

// get current location

// blank or null?

// send back the fixed css

// strip quotes (if they exist)

// already a full url? no change

//TODO: should we add protocol?

// convert the url to a full url

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

// css base code, injected by the css-loader

// return the list of modules as css string

// Adapted from convert-source-map (MIT)

// import a list of modules into the list

// skip already imported module

// this implementation is not 100% perfect for weird media query combinations

// when a module is imported multiple times with different media queries.

// I hope this will never occur (Hey this way we have smaller bundles)

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

// Test for IE <= 9 as proposed by Browserhacks

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// Tests for existence of standard globals is to allow style-loader

// to operate correctly into non-standard environments

// @see https://github.com/webpack-contrib/style-loader/issues/177

// If passing function in options, then use it for resolve "head" element.

// Useful for Shadow Root style i.e

// {

//   insertInto: function () { return document.querySelector("#foo").shadowRoot }

// }

// Special case to return head of iframe instead of iframe itself

// This will throw an exception if access to iframe is blocked

// due to cross-origin restrictions

// If a transform function was defined, run it on the css

// If the transform function returns a falsy value, don't add this css.

// This allows conditional loading of css

// noop

// If transform returns a value, use that instead of the original css.

// This allows running runtime transformations on the css.

// http://stackoverflow.com/a/26603875

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// tags it will allow on a page

// By default, add <style> tags to the <head> element

// By default, add <style> tags to the bottom of the target

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles

// add the styles to the DOM

/**
 * Swiper 4.5.0
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * http://www.idangero.us/swiper/
 *
 * Copyright 2014-2019 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: February 22, 2019
 */

/**
   * SSR Window 1.0.1
   * Better handling for window object in SSR environment
   * https://github.com/nolimits4web/ssr-window
   *
   * Copyright 2018, Vladimir Kharlampidi
   *
   * Licensed under MIT
   *
   * Released on: July 18, 2018
   */

// Create array-like object

// Return collection with methods

// eslint-disable-line

// String

// Other selectors

// Node/element

// Array of elements or instance of Dom

// Classes and attributes

// Get attr

// Set attrs

// Object

// eslint-disable-next-line

// Get value

// Set value

// Transforms

// Events

// Live events

/* jshint validthis:true */

// Iterate over the collection passing elements to `callback`

// Don't bother continuing without a callback

// Iterate over the current collection

// If the callback returns false

// End the loop early

// Return `this` to allow chained DOM operations

// no getter for object

// something got wrong

// Some old versions of Webkit choke when 'none' is passed; pass

// empty string instead in this case

// Latest Chrome and webkits Fix

// No support

// Extend params

// Extend instance methods and props

// Add event listeners

// Module create callback

// Prototype

// Class

// Callback

// Subtract paddings

// reset margins

// Calc slides

// Set slides order

// Remove last grid elements depending on width

// Find slides currently in view

// Find new height from highest slide in view

// Update Height

// Visible Slides

// Active classes

// Duplicate to all looped slides

// Next Slide

// Prev Slide

// Normalize slideIndex

// Get real index

// Update progress

// Directions locks

// Update Index

/* eslint no-unused-vars: "off" */

// Remove duplicated slides

// Fix For Negative Oversliding

// Fix For Positive Oversliding

// Minimal UI

// Windows

// Android

// iOS

// iOS 8+ changed UA

// Desktop

// Webview

// Pixel Ratio

// Export object

// isMoved = true;

// Vertical

// Grab Cursor

// Threshold

// Update active index in free mode

// Velocity

// Update translate

// Return Grab Cursor

// Time diff

// Tap, doubleTap, Click

// this implies that the user stopped moving a finger then released.

// There would be no events with distance zero, so the last event is stale.

// Fix duration

// Find current slide

// Find current slide size

// Long touches

// Short swipes

// Breakpoints

// Save locks

// Disable locks on resize

// Return locks after resize

//

// To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).

// Free mode

// Autoheight

// Set wrapper width

// Virtual Translate

// Effects

// 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

// Slides grid

// in px

// Disable swiper and hide navigation when container not overflow

// Round length

// Touches

// Unique Navigation Elements

// Resistance

// Progress

// Cursor

// Clicks

// Images

// loop

// Swiping/no swiping

// '.swipe-handler',

// Passive Listeners

// NS

// NEW

// Callbacks

// Prevent Links Clicks

// Resize handler

// Set breakpoint for window width and update parameters

// Get breakpoint for window width

// events

// WP8 Touch Events Fix

// image already loaded...

/*@__PURE__*/

// Swiper Instance

// Extend defaults with modules params

// Extend defaults with passed params

// Find el

// Save Dom lib

// Find Wrapper

// Extend Swiper

// Return app instance

// Classes

// Slides

// isDirection

// RTL

// Indexes

// Props

// Locks

// Touch Events

// Form elements to match

// Last click time

// Velocities

// Install Modules

// Init

// Set breakpoint

// Add Classes

// Create loop

// Update size

// Update slides

// Set Grab Cursor

// Slide To Initial Slide

// Attach events

// Init Flag

// Emit

// Detach events

// Destroy loop

// Cleanup styles

// Detach emitter events

// Emit resize

// Emit orientationchange

// The observerUpdate event should only be triggered

// once despite the number of mutations.  Additional

// triggers are redundant and are very costly

// Observe container

// Observe wrapper

// jquery fix

// Check that swiper should be inside of visible area of window

// This is the only way to test support for the `wheel` event in IE9+.

// Reasonable defaults

// pixelX, pixelY

// Legacy

// side scrolling on FF with DOMMouseScroll

// delta in LINE units

// delta in PAGE units

// Fall-back if spin cannot be determined

// Freemode or scrollContainer:

// Return page scroll on edge positions

// Emit event

// Stop autoplay

// Update Navigation Buttons

// Render || Update Pagination bullets/items

// Types

// Render Container

// Calc Scale From Multi-touches

// Define if we need image drag

// Toggle Zoom

// Zoom Out

// Zoom In

// Attach/Detach Events

// Scale image

// Move image

// Next Slides

// Prev Slides

// Get the indexes of x1 and x3 (the array indexes before and after given x2):

// xxx: for now i will just save one spline function to to

// this will create an Interpolate function based on the snapGrids

// x is the Grid of the scrolled scroller and y will be the controlled scroller

// it makes sense to create this only once and recall it for the interpolation

// the function does a lot of value caching for performance

// i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid

// but it did not work out

// Navigation

// Pagination

// Set shadows

// if (!$(this).hasClass(swiper.params.slideActiveClass)) return;

// Each slide offset from center

// Fix for ultra small values

// Set correct perspective for IE10

// Find actual thumbs index to slide to

// Activate thumbs

// 'bullets' or 'progressbar' or 'fraction' or 'custom'

/* harmony export (binding) */

/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).

// This module is a runtime utility for cleaner component module output and will

// be included in the final webpack user bundle.

/* server only */

/* vue-cli only */

// Vue.extend constructor export interop

// render functions

// functional template

// scopedId

// server build

// 2.3 injection

// functional

// 2.2 with runInNewContext: true

// cached call

// stateful

// inject component styles

// register component module identifier for async chunk inferrence

// used by ssr in case component is cached and beforeCreate

// never gets called

// for template-only hot-reload because in that case the render fn doesn't

// go through the normalizer

// register for functioal component in vue file

// inject component registration as beforeCreate hook

// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/listToStyles.js

/**
 * Translates the list format produced by css-loader into something
 * easier to manipulate.
 */

// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/addStylesClient.js

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
  Modified by Evan You @yyx990803
*/

/*
type StyleObject = {
  id: number;
  parts: Array<StyleObjectPart>
}

type StyleObjectPart = {
  css: string;
  media: string;
  sourceMap: ?string
}
*/

/*
  [id: number]: {
    id: number,
    refs: number,
    parts: Array<(obj?: StyleObjectPart) => void>
  }
*/

/* Array<StyleObject> */

/* StyleObjectPart */

// has SSR styles and in production mode.

// simply do nothing.

// has SSR styles but in dev mode.

// for some reason Chrome can't handle source map in server-rendered

// style tags - source maps in <style> only works if the style tag is

// created and inserted dynamically. So we remove the server rendered

// styles and inject new ones.

// use singleton mode for IE9.

// use multi-style-tag mode in all other cases

// https://developer.chrome.com/devtools/docs/javascript-debugging

// this makes source maps inside style tags work properly in Chrome

// extracted by mini-css-extract-plugin
